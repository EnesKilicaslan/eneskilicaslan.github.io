{"pageProps":{"info":{"title":"Conditional Rendering in Navlink of React Router","date":"25.1.2022","excerpt":"React Router v6 has been released and here there is a trick for styling","tags":["react","react-router-dom","navlink","link"],"slug":"react-router-dom-trick"},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      strong: \"strong\",\n      em: \"em\",\n      blockquote: \"blockquote\"\n    }, _provideComponents(), props.components), {Image} = _components;\n    if (!Image) _missingMdxReference(\"Image\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"React Router (react-router-dom for npm) is a fully-featured client and server-side routing library for React.\\nThey released version 6 recently. It has some breaking changes at the time this post is written.\\nAnd it's not backward compatible yet, so you might want to wait till the backward compatible version is released if you're thinking to upgrade version 5.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this post, I will talk about a small trick that will solve conditional rendering problem of the NavLink component.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As you might know, NavLink is special version of Link component.\\nIt is used in the navigation section of the apps. It has some additional attributes according to matched URL and we will take advantage\\nfrom one of those attributes.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I might want to render different components inside of the NavLink component according to its active state.\\nFor example, \", _jsx(_components.strong, {\n          children: \"instagram\"\n        }), \" is using filled icon if the current route matches with the component and using non-filled icon otherwise, as shown below\"]\n      }), \"\\n\", _jsx(Image, {\n        src: \"/images/react-router1.png\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As I said, Navlink is a special component.\\nIt's style attribute is a function that takes \", _jsx(_components.strong, {\n          children: _jsx(_components.em, {\n            children: \"isActive\"\n          })\n        }), \" argument which will be set to true when the route match with the corresponding component.\\nAnd we can benefit from that feature. We will keep a state object that represents active component and set it in the style function of each NavLink.\"]\n      }), \"\\n\", _jsx(Image, {\n        src: \"/images/react-router2.png\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For simplicity, I did not create extra components instead just wrote their names in string like “HomeFilled”, “Home”, “ProfileFilled”… Of course, you can put your real components here.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We created a function named activate, it takes the boolean value isActive together with the path. When the path is changed, then activate function is called automatically. So, our state will always have the updated path.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I can hear your saying\"\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"hmm fine, what if I want to use style property of NavLink???\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Well, we still can use style property separately for active and inactive states by setting the return value of \", _jsx(_components.strong, {\n          children: _jsx(_components.em, {\n            children: \"activate\"\n          })\n        }), \" function.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Thank you for reading so far, here the sandbox like in case you want to try yourself.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Please don't forget to leave claps and share with your friends if you found it useful.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"See you in the next post. Cheers..\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}